from flask import render_template,Flask,request,redirect,url_for,session,flashfrom wtforms import Form, TextField, validators, SelectField, TextAreaField,StringField,SubmitField,PasswordField, DateField, FileField, BooleanFieldfrom wtforms.validators import ValidationErrorfrom functools import wrapsimport pymongofrom pymongo import MongoClientimport hashlib ,datetimefrom app import app# bootstrap = Bootstrap(app)# @app.route('/login.html', methods=['GET','POST'])# def login():# 	name = None# 	password=None# 	if request.method == 'POST' and 'name1' and 'pswrd' in request.form:# 		name = request.form['name1']# 		password=request.form['pswrd']# 		return render_template('login.html', name1=name,pswrd=password)# 	else :# 	    return render_template('login.html', name1=name,pswrd=password)def login_required(f):    @wraps(f)    def wrap(*args,**kwargs):		if 'loged_in' in session:			return f(*args,**kwargs)		else:			flash ('you need to login first.')			return redirect(url_for('login'))             return wrap# db functions def dbconnect() :            client = MongoClient()    db = client['jsontesting']    return db# To save the array into the collection def save_collection(collection,arr):    db = dbconnect()    coll = db[collection]    data = coll.insert(arr)    return data      # Updating a document in collection(old doc is replaced by new doc) and inserting if nothing theredef update_collection(collection,arr,ary):          db = dbconnect()    coll = db[collection]    data = coll.update(arr,ary,upsert = True )    return data# To find the one array(first array from all the resulted arrays) from the collectiondef find_one_in_collection(collection,arr):    db = dbconnect()    coll = db[collection]    result = coll.find_one(arr)    return result# To Check Username or Email etc def checkfield(collection,field,value):          db = dbconnect()    coll = db[collection]    checkarray = {field : value}    checkresult = coll.find_one(checkarray)    return checkresult# end of db functions# creating a class for signup formclass SignupForm(Form):    firstname = StringField('firstname', [validators.required()])    lastname = StringField('lastname', [validators.required()])    email = TextField('Email', [validators.Length(min=6, max=120), validators.email()])    birthday  = DateField('Your Birthday', format='%d-%m-%Y')    gender = SelectField('Gender', choices=[('Male', 'Male'),('Female', 'Female')])    username = StringField('username', [validators.required(), validators.length(min=4, max=10)])    password = PasswordField('password', [validators.required()])    comments = TextField('comments', [validators.required()])    accept_rules = BooleanField('I accept the site rules', [validators.Required()])    def validate_email(form, field):        emailid = checkfield('Users','email',field.data)        if emailid:                raise ValidationError('Email id already exist')    def validate_username(form, field):        user_name = checkfield('Users','username',field.data)        if user_name:                raise ValidationError('Username is already exist')class usr_update(Form):    username = StringField('username', [validators.required()])    mobile_num = StringField('mobile_num', [validators.required()])    email = TextField('Email', [validators.Length(min=6, max=120), validators.email()]) # end of signup form# new contact form# class ContactForm(Form):#     # namefromthe htmlform =typeoffield(label to be shown in contact.html)#   name = TextField('name')#   email = TextField('email')#   subject = TextField('subject')#   message = TextAreaField('message')#   mobile=TextField('mobile')#   submit = SubmitField('send')# @app.route('/contact', methods=['GET', 'POST'])# def contact():#     name = TextField('name')#     email = TextField('email')#     subject = TextField('subject')#     message = TextAreaField('message')#     mobile=TextField('mobile')#     submit = SubmitField('send')#     if request.method == 'POST' and form.validate():#         comments = {#              "username" : name.data, #rendering from contactform class#              "email" : email.data,#              "subject" : subject.data,#              "textarea" : message.data,#              "mobile":mobile.data}#         save_collection('comments',comments)#         return 'Form posted.' #     return render_template('contact.html',)# end of contact form@app.route('/contact', methods=['GET', 'POST'])def contact():    # form = ContactForm(request.form)    if request.method == 'POST' and form.validate():        comments = {             "username" : TextField('name').data, #rendering from contactform class             "email" : TextField('name').data,             "subject" :TextField('name').data,             "textarea" :TextField('name').data,             "mobile":TextField('name').data}        save_collection('comments',comments)        return 'Form posted.'     return render_template('contact.html')# views for signup form@app.route('/register/', methods = ['GET', 'POST'])def register():    form = SignupForm(request.form)    if request.method == 'POST' and form.validate():        pw = hashlib.sha1(form.password.data).hexdigest()        users = {             "username" : form.username.data,             "fname" : form.firstname.data,             "password" : pw,             "email" : form.email.data}        save_collection('Users',users)        task = find_one_in_collection('Users',{"username" : form.username.data})        dob = datetime.datetime.strptime(str(form.birthday.data), '%Y-%m-%d')        dob_new = dob.strftime('%d-%m-%Y')        userinfo = { "fname" : form.firstname.data,                 "lname" : form.lastname.data,                 "dob" : dob_new,                 "uid" : task['_id'],                 "gender" : form.gender.data,                 "comments":form.comments.data}        save_collection('Userinfo',userinfo)        session['userid'] = str(task['_id'])             return flash('thank you for signing up with us!')    return render_template('signup.html', form = form ,name=None)# class of updateuser@app.route('/user_update/', methods = ['GET', 'POST'])def update():    up_form = usr_update(request.form)    if request.method == ['POST'] and form.validate():        user_update={                     "username":request.form.username,                     "address": request.form.address,                     "mobile_num":request.form.mobile_num}        save_collection('up_Users',user_update)        return "your details are updated sucessfully!"    return render_template('user_update.html',form=up_form)# end class of update user# @app.route('/user_update',method=['GET','POST'])# def user_update():#     form=user_update_form(request.form)#     if request.method == 'POST' and form.validate():#         username= form.username.data#         email=form.email.data#         update_collection('Users',username,email)#         return "your preferences have been recorded"#     return render_template('user_update.html',form=form)# end of views for signup form# @app.route('/')# @login_required# def index():#    return "you have sucessfully logged in."@app.route('/signup')def signup():    return render_template('signup.html')@app.route('/welcome')@login_requireddef welcome():   return "welcome :)"@app.route('/user_login_form')def user_login_form():   return render_template('user_login_form.html')@app.route('/index_login')@login_requireddef index_login():  return render_template('index_login.html')@app.route('/index_logout')@login_requireddef index_logout():    flash ('you jus logged out')    return render_template('index_logout.html')# login page example views:@app.route('/login',methods=['GET','POST'])def login():	error = None	if request.method == 'POST':		# check_user=find_one_in_collection('Users',{"username":request.form['username']})		# if check_user is not None:		# 	if check_user['password'] == request.form['password']:		# 		# create session		# 	else:		# 		flash ('invalid credentials')		# 		return redirect(url_for('login'))		# else:		# 	flash ('invalid credentials')		# 	return redirect(url_for('login'))		if request.form['username'] != 'admin' or request.form['password'] != 'admin':			error = "Please Enter a valid username and password."		else:			session ['loged_in']= True 			flash ('you were just logged in')			return redirect(url_for('index_login'))	return render_template('login_new.html',error=error)@app.route('/logout')@login_requireddef logout():   session.pop('loged_in',None)      return redirect(url_for('index_logout'))	# @app.route('/responsive.html')# @app.route('/')# def user():# 	return render_template('responsive.html')# @app.route('/forms.html')# class NameForm(Form):# 	name=StringField('What is your name ?',validators=[Required()])# 	submit=SubmitField('submit')